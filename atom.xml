<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Erthad's blog]]></title>
  <link href="http://erthad.name/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-10-24T20:19:50+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Disclaimer]]></title>
    <link href="http://erthad.name/blog/2020/12/20/disclaimer/"/>
    <updated>2020-12-20T00:00:00+03:00</updated>
    <id>http://erthad.name/blog/2020/12/20/disclaimer</id>
    <content type="html"><![CDATA[<p>Этот блог задумывался как поток сознания обо всем, касающемся технических тем.</p>

<p>Здесь я намерено не стараюсь подбирать точные слова и формулировки, зачастую после написания даже не проверяю текст.</p>

<p>Точность, выверенность фраз, афоризмы, описание устройства мира, ритуальные тексты &mdash; в других местах.</p>

<p>Исправления и указания на опечатки и ошибки, впрочем, приветствуются &mdash; для этого выделите ошибку и нажмите Ctrl-Enter.</p>

<p>Примерный список моих нынешних профессиональных знаний и умений можно посмотреть в <a href="http://www.linkedin.com/pub/timur-batyrshin/28/a52/2a2">профиле LinkedIn</a>.</p>

<p>Связаться со мной можно написав письмо там же, либо написав на <a href="mailto:erthad@gmail.com"><a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#101;&#114;&#x74;&#x68;&#97;&#x64;&#x40;&#103;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#x65;&#114;&#x74;&#104;&#97;&#100;&#x40;&#103;&#x6d;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Default attributes in chef]]></title>
    <link href="http://erthad.name/blog/2014/10/24/default-attributes/"/>
    <updated>2014-10-24T19:19:00+04:00</updated>
    <id>http://erthad.name/blog/2014/10/24/default-attributes</id>
    <content type="html"><![CDATA[<p>Как мы знаем, если мы в Chef используем какой-то произвольный атрибут <code>node.foobar</code>, и если у нас он в этот
момент неопределен мы получаем exception.</p>

<p>Это можно обойти несколькими способами:</p>

<ul>
<li>Конструкция вида <code>node.attribute?('foobar') ? node.foobar : 'some_default'</code> или она же завернутая в хелпер-функцию.
Это по очевидным причинам довольно неудобно.</li>
<li>Просто задаем умолчания (<code>nil</code>) в файле атрибутов для всех атрибутов, которые мы используем за исключением тех, на которых нам обязательно
нужно падать. Вариант хороший, у нас всегда есть документация по всем используемым атрибутам, но он начинает работать со
скрипом, когда мы дергаем атрибут из другого кукбука, который у нас в ранлисте может встречаться, а может и не встречаться.
Переопределять родительский атрибут в своих атрибутах нельзя, т.к. получим неопределенное поведение, приходиться вручную
заводить какие-то умолчания для нод или окружений.</li>
<li>Для всех таких случаев используем конструкцию <code>(( node.foobar rescue 'some_default' ))</code>. Именно так, с двойными скобками,
иначе мы не сможем ее передавать параметром внутри определения ресурса.</li>
</ul>


<figure class='code'><figcaption><span>Пример </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">template</span> <span class="s2">&quot;/tmp/myfile&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">template</span> <span class="k">rescue</span> <span class="s2">&quot;template.erb&quot;</span><span class="p">)</span>   <span class="c1"># так не пропустит синтаксис ruby</span>
</span><span class='line'>  <span class="n">mode</span>    <span class="n">node</span><span class="o">.</span><span class="n">mode</span>     <span class="k">rescue</span> <span class="s2">&quot;0644&quot;</span>            <span class="c1"># так сработает неправильно (см. ниже)</span>
</span><span class='line'>  <span class="n">owner</span> <span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">owner</span>    <span class="k">rescue</span> <span class="s2">&quot;root&quot;</span><span class="p">))</span>      <span class="c1"># &lt;-- так правильно</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><ul>
<li>Второй вариант этого кода кажется нормальным, но он будет выполняться как <code>(mode node.mode) rescue "0644"</code>, что
очевидно делает совсем не то, что нам надо &mdash; значение по-умолчанию не передается внутрь ресурса в случае exception, как мы здесь ожидаем.</li>
</ul>
</li>
</ul>


<p>Какой же из способов лучше? Все хороши. Я уже давным давно пользуюсь вторым и чуть менее давно &mdash; третьим. Заводить функцию под первый
вариант не нравится, т.к. придется всюду таскать ее или зависимость на кукбук, который ее определеяет.</p>

<p>Еще есть хороший вариант, предлагаемый <a href="http://evilmartians.com/">Evil Martians</a> &mdash; заворачивать в LWRP все что можно, но с этим
вариантом проблема такая же как со многими хорошими паттернами программирования: если ты сразу его не применил, придется в какой-то
момент останавливаться и делать глобальный рефактор всего.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Что такое devops]]></title>
    <link href="http://erthad.name/blog/2014/06/14/chto-takoie-devops/"/>
    <updated>2014-06-14T23:45:00+04:00</updated>
    <id>http://erthad.name/blog/2014/06/14/chto-takoie-devops</id>
    <content type="html"><![CDATA[<p>В интернетах существует великое множество статей на тему &ldquo;что такое devops&rdquo;,
приводятся разнообразные версии, как-то:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/DevOps">общение/сотрудничество/интеграция</a></li>
<li><a href="http://www.getchef.com/blog/2010/07/16/what-devops-means-to-me/">культура/автоматизация/измерение/обмен</a></li>
</ul>


<p>и прочие подобные вариации и это все действительно вдохновляет.</p>

<p>Тут же рядом движутся движения ChatOps и MonitoringLove (ex-MonitoringSucks), ворох технологических решений
(управление конфигурацией, виртуализация, контейнеризация, и еще вагон и маленькая тележка) и технологических
практик (унификация dev/prod окружений, immutable servers, continuos delivery/deployment).</p>

<p>Часто приводят параллели с <a href="http://ru.wikipedia.org/wiki/Agile">Agile</a>, и довольно часто пытаются (чаще всего
на LinkedIn и, по-моему, не очень успешно) как-то стыковать его с <a href="http://ru.wikipedia.org/wiki/ITIL">ITIL</a>.</p>

<p>Однако, практически каждое понятие можно свести к базовым смыслам, при помощи которых можно описать его
максимально сжато.</p>

<p>Для devops это будет &ldquo;<strong>управление общей технологической основой организационных процессов</strong>&rdquo;.</p>

<p>Любая организационная практика (а devops несомненно такой является) призвана как-то упорядочивать процессы в
организации, делать их понятными.</p>

<p>ITIL делает это за счет их формализации, документирования.<br>
Agile делает это за счет того, что принуждает людей больше общаться, обмениваться информацией, делиться опытом.<br>
Devops создает технологическое пространство, в котором организационные процессы происходят &mdash; задает контекст, создает
(простой!) протокол и средства общения, которые одновременно являются документированием, логированием, средствами управления и
разработки &mdash; <em>технологической основой</em> организационных процессов.</p>

<p>Сюда замечательно ложится все вышеперечисленное:</p>

<ul>
<li>&ldquo;общение/сотрудничество/интеграция&rdquo; &mdash; в общем, то же самое, но довольно поверхностно и крайне размыто, на грани понимания</li>
<li>&ldquo;культура/автоматизация/измерение/обмен&rdquo; &mdash; то же самое, но в терминах более-менее понятных процессов</li>
<li>управление конфигурацией &mdash; протокол работы с серверами, одновременно является документацией, а также основой для почти всего остального</li>
<li>унификация dev/prod окружений и immutable servers &mdash; контекст технологического общения разработчиков, тестеров и админов</li>
<li>виртуализация, контейнеризация &mdash; немного сбоку, но без них вряд ли возможно что-то из перечисленного</li>
<li>continuos delivery/deployment &mdash; делаем наш процесс непрерывным, вовлекаем в него людей</li>
<li>ChatOps &mdash; протокол, логирование, средство управления, коммуникация с командой</li>
<li>MonitoringLove &mdash; то же самое, что у ChatOps, но практически однонаправленное (поэтому ChatOps во многом на нем основан)</li>
</ul>


<p>Естественно, как и Agile с ITIL, Devops в частности &mdash; это каталог, набор практик, приемов, технологий, инструментов
для осуществления задачи, которую он перед собой ставит. Каждая из его частей делает какой-то вклад, но не является
обязательной. Вполне нормально применять один-два приема, или же применять все, что получается &mdash; вопрос лишь в том,
что мы хотим получить и какой ценой.</p>

<p>Devops &mdash; это <strong>&ldquo;управление общей технологической основой организационных процессов&rdquo;</strong>, именно так.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Переименовал учетку Github]]></title>
    <link href="http://erthad.name/blog/2014/06/07/pierieimienoval-uchietku-github/"/>
    <updated>2014-06-07T21:40:00+04:00</updated>
    <id>http://erthad.name/blog/2014/06/07/pierieimienoval-uchietku-github</id>
    <content type="html"><![CDATA[<p>Переименовал учетку github в более короткую. Теперь я <a href="https://github.com/timurb">timurb</a> (был timurbatyrshin).</p>

<p>Если увидите, что где-то что-то отвалилось из-за этого, просьба сообщать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Китайский в Chrome]]></title>
    <link href="http://erthad.name/blog/2014/06/07/kitaiskii-v-chrome/"/>
    <updated>2014-06-07T19:55:00+04:00</updated>
    <id>http://erthad.name/blog/2014/06/07/kitaiskii-v-chrome</id>
    <content type="html"><![CDATA[<p>Как я уже <a href="../ustanovka-samsung-ml-2010-na-ubuntu-14-dot-04/">писал</a>, после обновления Ubuntu до версии 14.04
в Google Chrome поломалось отображение китайского языка, причем, только в Chrome/Chromium &mdash; в Mozilla Firefox,
как и в других местах системы, все отображалось нормально.</p>

<p>Как выяснилось, видимо, где-то поменялся шрифт по-умолчанию для отображения иероглифов.
Установка всех имеющихся в репозитории китайских шрифтов исправила дело.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Установка Samsung ML-2010 на Ubuntu 14.04]]></title>
    <link href="http://erthad.name/blog/2014/06/07/ustanovka-samsung-ml-2010-na-ubuntu-14-dot-04/"/>
    <updated>2014-06-07T19:13:00+04:00</updated>
    <id>http://erthad.name/blog/2014/06/07/ustanovka-samsung-ml-2010-na-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<p>Обновление Ubuntu до версии 14.04 прошло на удивление без косяков &mdash; ничего из основных устройств и приложений
не отвалилось. Мелкие косяки все же есть &mdash; отвалился принтер Samsung ML-2010 и поддержка китайского языка
в Chrome.</p>

<p>Принтер системой определялся, но не печатал.
Наконец-то нашел пару часов и установил драйвера для принтера. Делается это примерно так:</p>

<p>Качаем и распаковываем универсальный драйвер принтера:
<a href="http://downloadcenter.samsung.com/content/DR/200902/20090225163328453/UnifiedLinuxDriver.tar.gz">http://downloadcenter.samsung.com/content/DR/200902/20090225163328453/UnifiedLinuxDriver.tar.gz</a></p>

<p>С использованием скриптов установки у меня завести принтер не получилось, поэтому делаем все вручную.</p>

<p>Берем нужный PPD из <code>cdroot/Linux/noarch/at_opt/share/ppd</code> и подсовываем его принтеру, который у нас Ubuntu нашла сама.
Он требует фильтр <code>/usr/lib/cups/filter/rastertosamsungspl</code>. Кладем его из этого же архива к себе в систему.</p>

<p>Чтобы не искать их потом еще раз, я положил их сюда:</p>

<ul>
<li><a href="http://erthad.name/files/ML-2010spl2.ppd">ML-2010spl2.ppd</a></li>
<li><a href="http://erthad.name/files/rastertosamsungspl">rastertosamsungspl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сортировка версий на шелле]]></title>
    <link href="http://erthad.name/blog/2014/04/28/sortirovka-viersii-na-shiellie/"/>
    <updated>2014-04-28T13:42:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/28/sortirovka-viersii-na-shiellie</id>
    <content type="html"><![CDATA[<p>Периодически сталкиваюсь с задачей: как сравнить две версии вида X1.Y1.Z1 на шелле.
Очень часто это делают при помощи разнообразных врапперов.</p>

<!-- more -->


<p>На Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;1.22.3&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="ss">Gem</span><span class="p">:</span><span class="ss">:Version</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;1.2.3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Или на Python:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pkg_resources</span><span class="o">.</span><span class="n">parse_version</span><span class="p">(</span><span class="s">&#39;1.22.3&#39;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">pkg_resources</span><span class="o">.</span><span class="n">parse_version</span><span class="p">(</span><span class="s">&#39;1.2.3&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c"># False</span>
</span></code></pre></td></tr></table></div></figure>


<p>Однако есть простой способ (<a href="http://stackoverflow.com/a/15324047/308871">о котором я позабыл</a>)
сравнить две версии на шелле, не запуская никаких дополнительных скриптовых языков:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat | sort -V <span class="s">&lt;&lt; EOF</span>
</span><span class='line'><span class="s">1.22.3</span>
</span><span class='line'><span class="s">1.2.3</span>
</span><span class='line'><span class="s">EOF</span>
</span><span class='line'><span class="c"># 1.2.3</span>
</span><span class='line'><span class="c"># 1.22.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Запишу здесь, чтобы больше об этом не забывать.</p>

<p>Из минусов &mdash; скорее всего, не будет работать на странных системах типа MacOSX.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Трансляция блога в твиттер]]></title>
    <link href="http://erthad.name/blog/2014/04/24/transliatsiia-blogha-v-tvittier/"/>
    <updated>2014-04-24T23:32:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/24/transliatsiia-blogha-v-tvittier</id>
    <content type="html"><![CDATA[<p>Настроил <a href="https://zapier.com">Zapier</a> для трансляции блога в твиттер.
Эта запись будет проверкой связи.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devops]]></title>
    <link href="http://erthad.name/blog/2014/04/16/devops/"/>
    <updated>2014-04-16T13:17:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/16/devops</id>
    <content type="html"><![CDATA[<p>Как всем известно, последние несколько лет очень популярно слово &ldquo;Devops&rdquo;.
Про это пишут большое количество статей, кто-то говорит про культуру, кто-то
про задачи бизнеса, кто-то про автоматизацию, сравнивают с Agile, но ясности
это не прибавляет. Внесу и я свои пять копеек на этот счет.</p>

<!-- more -->


<p>По мне так говорить о devops смысла нет вообще — правильнее говорить о том,
чтобы хорошо выполнять свою работу, внимательно относиться к другим участникам
проекта и развиваться в профессиональном (и других) смыслах.</p>

<p>Когда-то давно, когда серверов было мало, и когда было четкое разделение обязанностей
программистов и админов можно было позволить себе выточить из цельной глыбы исходников пакетов
дистрибутив мечты с правильно настроенными конфигами, расставленными костылями и
собственной архитектурой, не связанной с приложением, которое размещаешь.
Разработчикам тестовые сервера не давали т.к. их не было (хорошо если вообще были сборочницы), все работали
под виндой, приложение тестировали на собственных как попало настроенных компах, код выкатывали
в бинарниках и в общем-то вполне естественно было разделение сфер ответственности: админы админят
сервера и деплоят приложение, программистов туда не пускают, чтобы не отломали какой-нибудь костыль,
и все ошибки пуляют друг другу. Естественное желание разобраться в проблеме, найти проблему
и совместно ее исправить было реализовать нелегко (машинные мощности дорогие, приложение бинарное
и сложное), в свою среду разработки программисты никого (тоже по вполне естественным причинам) никого
не пускают. Потому и поддерживали стабильность лишь ограничивая сферу своей ответственности.
Я, по правде говоря, этих времен почти не застал, т.к. довольно быстро срулил из программирования
когда оно перешло из DOS в Windows (и сейчас понимаю, что причины во многом были именно вышеприведенные).
Автоматизировать что-то можно было, конечно, но смысла большого не имело, т.к. новые сервера ставились
раз в год, их было мало и проще было держать отдельно конфиги/доки по установке (или вообще каждый
раз это исследовать этот процесс заново), чем пытаться все это описывать скриптами.</p>

<p>Сейчас же мощности дешевые, сервера можно ставить десятками в день, и появляется <em>естественное</em>
желание этот процесс улучшить. Хочется сделать свою работу эффективнее, тратить на нее меньше усилий,
поддерживать хорошие отношения со всеми членами команды, и в итоге делать <em>общую</em> работу эффективнее.
Повторюсь, это вполне естественное желание здорового человека — заниматься <strong>осмысленной</strong> деятельностью.
Изменились лишь требования, предпосылки к этой <em>осмысленной</em> деятельности. Во многом это выражено
в <a href="http://agilemanifesto.org/">Agile manifesto</a>, который в трех словах говорит: &ldquo;Давайте жить дружно&rdquo;.</p>

<p>Из этого вытекает множество направлений деятельности, которые часто называют словом &ldquo;devops&rdquo;:</p>

<ul>
<li>Автоматизация развертывания серверов. Когда их десятки-сотни, для нас вытачивать вручную каждый из них —
менее эффективно, чем занять этим роботов.</li>
<li>Упрощенный деплой. Программисты в общем уже придумали множество инструментов для этого и, наверное,
для всех языков. Идея в том, что в идеале это должно занимать времени и внимания меньше, чем развернуть
новый сервер. Тратить несколько часов чтобы просто собрать и задеплоить какое-нибудь приложение на Java сейчас
становится просто дорого. Естественно, и приложение должно позволять это сделать.</li>
<li>CI. Это тоже, пожалуй, придумали программисты некотороые время назад, чтобы проще было собирать бинарник
и гонять тесты. Опять таки, приложение должно быть спроектировано, чтобы это поддерживать.
Шажок дальше — совместить сборку приложения и деплой на тестовый сервер, на который можно и программистов,
например, пустить (напоминаю, теперь мы можем себе этот сервер позволить, а раньше далеко не всегда могли).</li>
<li>Сбор и анализ всевозможных метрик и логов в едином месте. Это упрощает нам нахождение причин ошибок с тем,
чтобы передать их на исправление правильному человеку.</li>
<li>Культура взаимодействия разработчиков и админов. С одной стороны, все вышеприведенное попросту невозможно без нее,
а с другой стороны, у нас появилась возможность делать это <em>безопасно для обоих сторон</em>, и это действительно
важно.</li>
</ul>


<p>Иными словами, все это означает <em>работать одной командой</em> и стараться делать свою часть работы как можно лучше.</p>

<p>Где же здесь &ldquo;devops&rdquo;? Не знаю, может подскажет кто?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Broadcom 4313 и Ubuntu 13.10]]></title>
    <link href="http://erthad.name/blog/2014/04/07/broadcom-4313-i-ubuntu-13-dot-10/"/>
    <updated>2014-04-07T17:10:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/07/broadcom-4313-i-ubuntu-13-dot-10</id>
    <content type="html"><![CDATA[<p>Прикупил я с год назад ноут <a href="http://market.yandex.ru/model-spec.xml?modelid=10451594&amp;hid=91013">Lenovo B590</a> и
в целом все с ним нормально, за исключением проблем с Wi-Fi.</p>

<p>Стандартные драйвера от Ubuntu 13.04 встали нормально, но сеть не цеплял.
В то время рецептом была установка bcmwl-kernel-source более старой версии, от Ubuntu 12.04 (5.XX вместо последней 6.20).
Замечательно это все исправляло до примерно осени, когда обновилось ядро до 3.11 и совместимость с ним пропала.
Некоторое время просидел на текущем bcmwl-kernel-source благо он стал к тому времени получше работать, но
и с ним сигнал ловился плохо, и с некоторыми точками на стандарте 802.11n отказывался работать вообще.</p>

<p>Недавно это задрало и решил как-то это дело исправить.
Выяснилось, что теперь можно поставить broadcom-sta-dkms (кажется, это тот самый старый драйвер, о котором упоминал раньше, но в
новой обертке), однако и он не собрался под новое ядро. На этот раз нашел к нему патч: <a href="http://www.mindwerks.net/wp-content/uploads/2013/10/wl_3.10.patch">http://www.mindwerks.net/wp-content/uploads/2013/10/wl_3.10.patch</a>
Применяем его находясь примерно в <code>/usr/src/broadcom-sta-5.100.82.112</code>, делаем <code>dpkg-reconfigure broadcom-sta-dkms</code> и перегружаемся, и все работает замечательно (вместо перезагрузки можно выгрузить старый модуль, загрузить новый, но на тот момент у меня не хватило
 воли сделать это правильно).</p>

<p>Вероятно, в новых версиях ядра все снова отвалится, будем решать этот вопрос снова.</p>

<p>Как вариант, можно поменять сетевуху на одну из следующих:</p>

<ul>
<li>WLAN, Non-Intel 1x1 11bgn + BT4.0 Combo, Broadcom 4313 + 20702 20200100, 20200101</li>
<li>WLAN, Non-Intel 2x2 11abgn + BT4.0 Combo, Broadcom 43228 + 20702 20200098, 20200099</li>
<li>WLAN, Intel 2x2 11bgn + BT4.0 Combo, Jackson Peak 1 20200078 (это что-то типа INTEL 2230 WIRELESS-N WIFI MINICARD LC 20200078 4W3765)</li>
<li>WLAN, Non-Intel 1x1 11bgn, Broadcom BCM4313 1x1 BGN MOW 20200102</li>
<li>WLAN, Non-Intel 1x1 11bgn, Realtek bgn 1x1 HMC WLAN Stockton 20200016 (это скорее всего Realtek 8188 или что-то подобное)</li>
</ul>


<p>Из этих нас, очевидно интересуют Intel и Realtek. Intel стоит 1-1.5тыр в юлмарте, Realtek можно попробовать наковырять в Алтыне за 500р.</p>

<p>Для использования остальных железок пишут, что придется перепрошивать биос. Скорее всего, это не сложно.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тестирование правил мониторинга]]></title>
    <link href="http://erthad.name/blog/2014/03/27/testirovanie-pravil-monitoringha/"/>
    <updated>2014-03-27T21:53:00+04:00</updated>
    <id>http://erthad.name/blog/2014/03/27/testirovanie-pravil-monitoringha</id>
    <content type="html"><![CDATA[<p>Регулярно хочется формализовать некоторые правила, по которым должен работать сервер как &ldquo;черный ящик&rdquo;.</p>

<ul>
<li>&ldquo;Если места на диске осталось меньше 1Гб, должен прийти алерт от мониторинга&rdquo;</li>
<li>&ldquo;Если сервис у нас лежит, должен прийти алерт от мониторинга&rdquo;</li>
<li>&ldquo;При входе на сайт нас должно перекидывать на https&rdquo;</li>
</ul>


<p>и т.д.</p>

<p>Задачу &ldquo;внешнего&rdquo; тестирования, наверное, может помочь решить <a href="https://github.com/gauntlt/gauntlt,">https://github.com/gauntlt/gauntlt,</a> а вот
как писать спеки для заббикса?</p>

<p>Зачем это нужно? Допустим, мы правим какой-то триггер, и в нем ошиблись &mdash; написали вместо гигабайтов байты.
Когда мы об этом узнаем? Только уже когда проблема возникла. Для этого и нужно тестирование &mdash; создав
аварийную ситуацию на тестовом сервере мы сможем узнать, правильно ли работает правило.</p>

<p>Никому не встречался инструмент для решения такой задачи?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyVsPython]]></title>
    <link href="http://erthad.name/blog/2014/03/13/rubyvspython/"/>
    <updated>2014-03-13T13:57:00+04:00</updated>
    <id>http://erthad.name/blog/2014/03/13/rubyvspython</id>
    <content type="html"><![CDATA[<p>Я уже где-то в твиттере писал свои впечатления от первого знакомства с python
после ruby, сегодня пришла очередная волна впечатлений, запишу их здесь.</p>

<p>Стандартная поставка:</p>

<ul>
<li>В Python практически все нужные для жизни вещи есть в стандартных библиотеках,
и они нормального качества, в том смысле, что ими можно пользоваться без проблем.</li>
<li>В Ruby стандартная библиотека довольно жуткая, и всегда хочется использовать
вместо нее какой-то гем, который делает то же самое, но проще и удобнее.</li>
</ul>


<p>Использование модулей:</p>

<ul>
<li>В Python при установке новых модулей они с высокой вероятностью по зависимостям
ничего не вытянут. Ну пару других модулей максимум.</li>
<li>В Ruby почти всегда гем зависит от довольно большого количества других гемов.
От этого и dependency hell вероятнее, и вообще это неудобно, если программирование
на ruby &mdash; не твое основное занятие.</li>
</ul>


<p>Названия модулей:</p>

<ul>
<li>Мне показалось, что в Python модули чаще называются сообразно тому, что они делают,
по названию модуля почти всегда можно понять для чего он.</li>
<li>В Ruby очень популярно давать гемам всякие странные названия, которые прикольно
звучат, но по которым сразу и не догадаешься о чем они. Соответственно, их сложнее
искать.</li>
</ul>


<p>Интерфейсы:</p>

<ul>
<li>Многие альтернативные модули (см., например, json) в Python делают ту же вещь, с тем
же интерфейсом, но с другой реализацией. Т.е. часто можно менять одно на другое
вообще с минимальными изменениями кода.</li>
<li>В Ruby очень любят плодить интерфейсы.</li>
</ul>


<p><strong>Выводы:</strong></p>

<ul>
<li>Для системных скриптов, да и шире, системного программирования удобнее
использовать Python, а также когда программирование не твое основное занятие.</li>
<li>Для установки приложения на большое количество разных хостов удобнее Python.
(Предыдущий пункт &mdash; частный случай этого). Шелл в этом смысле еще удобнее, но
на нем приходится писать много лишнего если пишешь что-то мало мальски сложное.</li>
<li>Для веб-приложений можно использовать то, к чему больше привык.</li>
</ul>


<p>Продолжение, я думаю, последует.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LinkedIn invitations]]></title>
    <link href="http://erthad.name/blog/2014/01/08/linkedin-invitations/"/>
    <updated>2014-01-08T18:53:00+04:00</updated>
    <id>http://erthad.name/blog/2014/01/08/linkedin-invitations</id>
    <content type="html"><![CDATA[<p>Всем, кто пользуется <a href="http://www.linkedin.com/">LinkedIn</a>, наверняка,
периодически приходят приглашения в контакты от странных людей, которые
хотят неизвестно чего. Кто-то забивает и просто их добавляет.
Мне обычно неохота добавлять случайных людей просто для количества, но
LinkedIn не дает напрямую написать человеку не из своих контактов (если,
конечно, у тебя не премиум учетка).</p>

<p>Чтобы написать человеку, который хочет тебя добавить в контакты, жмем на кнопку
с конвертом в правом верхнем углу (на нем выскакивает оповещение), потом
выбираем &ldquo;Invitations&rdquo;. В выпадающем списке около кнопки &ldquo;Accept&rdquo; выбираем Reply.</p>

<p>Неоднократно забывал и не мог найти, где это находится, поэтому запишу здесь, пригодится.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Suspend to disk]]></title>
    <link href="http://erthad.name/blog/2014/01/04/suspend-to-disk/"/>
    <updated>2014-01-04T13:21:00+04:00</updated>
    <id>http://erthad.name/blog/2014/01/04/suspend-to-disk</id>
    <content type="html"><![CDATA[<p>В убунту криво работает suspend to disk, настроить его можно несколькими способами:
* стандартный ядерный &mdash; у меня толком не заработал
* tuxonice &mdash; работает отлично, но только если не зависнет во время засыпания при освобождении памяти.
  Зависает когда много всего запущено. Например, очень часто виснет при запущенном броузере.
* uswsusp &mdash; поставил только что. Навскидку работает более менее нормально, но:
  * проверку MD5 нужно отключить, иначе ругается на несовпадение контрольных сумм (тем не менее, при этом показывает одинаковые суммы)
  * шифрование образа не работает, т.к. <a href="https://bugs.launchpad.net/ubuntu/+source/uswsusp/+bug/736487">uswsusp не умеет работать с plymouth</a>
  * сразу после просыпания комп усиленно работает диском и тормозит. Похоже, вытаскивает страницы памяти из свапа.</p>

<pre><code>Т.е. по ощущениям засыпание на диск становится не "более медленным и надежным засыпанием", а "выключением с полным сохранением сессии".
</code></pre>

<p>Буду рад советам как это все исправить.</p>

<p>Как включать hibernate в меню и как настраивать tuxonice я уже не помню, запишу для uswsusp, чтобы не забыть.</p>

<ul>
<li>Ставим <code>uswsusp</code>.</li>
<li>Правим <code>/etc/uswsusp.conf</code>. Это также можно сделать и при помощи <code>dpkg-reconfigure uswsusp</code>, но вручную по-моему удобнее.</li>
<li>Создаем <code>/etc/initramfs-tools/conf.d/resume</code>, в котором пишем <code>RESUME=/dev/sda1</code>. Здесь sda1 &mdash; диск со свапом. Это нужно для срабатывания просыпания при загрузке.</li>
<li>Каждый раз при изменении этих файлов запускаем <code>sudo update-initramfs -u</code>. Без этого изменения останутся у нас на диске и не попадут в initrd.</li>
<li>Строчку в <code>/etc/grub/default</code> добавлять НЕ надо. Это понадобилось бы, если бы мы не пользовались initramfs-tools.</li>
<li>Создаем <code>/etc/pm/config.d/00sleep_module</code> с содержимым <code>SLEEP_MODULE="uswsusp"</code>. Это нужно, чтобы использовался <code>uswsusp</code> при вызовах <code>pm-hibernate</code>.</li>
<li>У нас теперь должно заработать засыпание при помощи команды <code>sudo s2disk</code></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 13.XX и WiFi Broadcom]]></title>
    <link href="http://erthad.name/blog/2013/11/23/ubuntu-13-dot-xx-i-wifi-broadcom/"/>
    <updated>2013-11-23T10:34:00+04:00</updated>
    <id>http://erthad.name/blog/2013/11/23/ubuntu-13-dot-xx-i-wifi-broadcom</id>
    <content type="html"><![CDATA[<p>Если у вас в ноутбуке WiFi чип Broadcom (у меня BCM4313), вы наверняка уже слышали про проблемы с ним в Ubuntu 13.XX</p>

<p>Для 13.04 решением было установить bcmwl-kernel-source из 12.10 (версии 5.100 вместо 6.20) и поставить его на холд.</p>

<p>С новыми ядрами, идущими с 13.10 старая версия модуля уже не собирается. Но зато вроде бы починилась стандартная версия, из коробки.
Уровень сигнала в трее показывается слабже, чем показывался раньше, но вроде бы работает все не хуже.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible -- беглый обзор]]></title>
    <link href="http://erthad.name/blog/2013/10/21/ansible-bieghlyi-obzor/"/>
    <updated>2013-10-21T23:50:00+04:00</updated>
    <id>http://erthad.name/blog/2013/10/21/ansible-bieghlyi-obzor</id>
    <content type="html"><![CDATA[<p>Бегло прошелся по докам к <a href="http://www.ansibleworks.com/docs/">Ansible</a>.
Попробую сравнить с <a href="http://www.opscode.com/chef/">Chef</a> и <a href="http://puppetlabs.com/puppet/puppet-open-source">Puppet</a>, с которыми у меня есть хороший опыт работы.</p>

<p>Интересная штука, но своеобразная.</p>

<!-- more -->


<h3>Простые случаи использования</h3>

<p>Для случаев, когда нужно установить пару пакетов, разложить несколько конфигов по местам.</p>

<ul>
<li>проще чем Puppet</li>
<li>вместо ресурсов скорее правильнее говорить об операциях или командах (но при этом декларативных)</li>
<li>модули на все случаи жизни <a href="http://www.ansibleworks.com/docs/modules.html">из коробки</a></li>
<li>не требует инсталляции на настраиваемый сервер ничего кроме Python (а он и так почти всегда есть)</li>
<li>нет серверной части (в том же понимании, как у Chef/Puppet)</li>
<li>управляющая (клиентская) часть ставится легко и почти ничего не вытягивает</li>
<li>работает по SSH</li>
<li>можно выполнить отдельную операцию с командной строки точно так же как из плейбука
(аналога манифеста Puppet и кукбука Chef)</li>
<li>нет поллинга (запускается только вручную)</li>
</ul>


<p>Это наталкивает на мысль, что его очень удобно использовать для первоначального разворачивания серверов
по сравнению с Chef/Puppet. Или для какого-нибудь начала управления кучей ручных разнородных серверов,
что почти то же самое.</p>

<p>Пожалуй, я бы для бутстрапа (без далеких планов) рекомендовал бы теперь его.</p>

<h3>Сложные случаи использования</h3>

<p>Для случаев, когда нужно поддерживать архитектуру с многими ролями, да еще и завязанных друг на друга.</p>

<ul>
<li>ограниченный язык (похож в этом на Puppet) &mdash; сложную логику писать скорее всего непросто</li>
<li>но модули дописывать легче, и чем на Chef и тем более чем на Puppet &mdash; можно писать на любом языке,
разговаривают с сервером по STDIN/STDOUT. Для Python есть библиотеки, упрощающие дело.</li>
<li>шаблоны на Jinja2 вместо ERB, что в чем-то добавляет гибкости (т.е. легко расширять, например добавить хелперов), а в чем-то уменьшает (нельзя код в шаблонах писать)</li>
<li>мне показалось, что и плагины (логирование, пост-хуки и т.п.) писать также проще чем в Puppet/Chef</li>
<li>операции выполняются сверху вниз как в Chef (а не по зависимостям как в Puppet)</li>
<li>оповещения мне показались более ограниченными по сравнению с Chef и Puppet (но ограниченными правильно) &mdash;
&ldquo;обычные&rdquo; операции идут отдельным списком от тех, куда шлются оповещения</li>
<li>инвентарем управлять, похоже, проще чем в Chef и Puppet, можно его хранить в VCS</li>
<li>нет центрального хранилища фактов</li>
<li>нет автоматической поддержки разных OS. Т.е. вместо, например <code>package</code> из Chef, Puppet у нас есть <code>apt</code> и <code>yum</code>.</li>
<li>весь гемор с сертификатами клиентов теперь заменяется просто использованием соответствующего SSH-ключа</li>
<li>вместо SSH можно отдельной командой запустить супер-быстрый шифрованный канал, чтобы команды выполнялись
мгновенно (привет <a href="https://github.com/saltstack/salt">SaltStack</a>)</li>
<li>при желании можно вместо этого достаточно несложно дописать транспорт, скажем, через ActiveMQ/XMPP или что-то еще</li>
<li>в целом он мне показался намного более Unix-way</li>
</ul>


<h3>Что это значит?</h3>

<ul>
<li>Насколько просто писать сложные конфигурации &mdash; хз, нужно пробовать.</li>
<li>Пологая кривая обучения, легко, скорее всего перейти от скриптов деплоя к управлению инфраструктурой,
но где-то в середине похоже крутая горка, которую многие не преодолеют (в Puppet эта
горка еще круче, и за ней никакого плато уже нет), дальше снова пологая кривая.</li>
<li>Puppet использовать смысла теперь не вижу абсолютно никакого. Раньше не исключал его использование для маленьких простых случаев.</li>
<li>Серверную часть для сложных конфигураций придется собирать самим, но зато она получится какая нам нужна,
и скорее всего она окажется достаточно простая (типа пары заданий в кроне и нескольких скриптов обертки).
Сравни с Chef Server, который тянет RabbitMQ, CouchDB, Solr и еще какую-то кучку всего, или с Puppet, для которого
серверные компоненты (базы, hiera, дашборд и т.п.) подгонять друг под друга приходится день-другой-третий.</li>
<li>Если у нас зоопарк разношерстных систем (видел такой наверное только полраза, даже меньше), наверное будет управляться
не очень просто.</li>
<li>Т.к. система объединяет Orchestration с Configuration management можно ее использовать и например для деплоя,
или поддержки всего жизненного цикла серверов, начиная от создания контейнера и заканчивая его удалением, причем, все это
заворачивать в плейбуки. Сравни с Knife шефа или Puppet faces, которые добавляют конечно удобства, но не очень то
и нужны как таковые.</li>
</ul>


<p>Нужно будет еще когда-нибудь <a href="https://github.com/saltstack/salt">SaltStack</a> и <a href="http://palletops.com/">Pallet</a> посмотреть
для общего развития.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHPMyAdmin и Yandex SafeBrowsing]]></title>
    <link href="http://erthad.name/blog/2013/10/16/phpmyadmin-i-yandex-safebrowsing/"/>
    <updated>2013-10-16T14:05:00+04:00</updated>
    <id>http://erthad.name/blog/2013/10/16/phpmyadmin-i-yandex-safebrowsing</id>
    <content type="html"><![CDATA[<p>Иногда случается ситуация, когда <a href="http://api.yandex.ru/safebrowsing/">Yandex SafeBrowsing</a> <a href="http://www.yandex.com/infected?url=yandex.ru">помечает сайт</a>  как содержащий <code>Troj/JSRedir-MH</code>, причем, <a href="https://www.virustotal.com/">VirusTotal</a>  говорит, что сайт чистый по всем базам, кроме Yandex SafeBrowsing.
В интернетах эту тему обсуждают много где, часто у людей эта проблема регулярно появляется и исчезает сама, в итоге приходят к выводу, что у яндекса что-то глючит.</p>

<p>Как выяснилось, Yandex скорее всего таким образом реагирует на PHPMyAdmin. Проверьте, не установлен ли он у вас.</p>

<p>Причем, для того, чтобы яндекс среагировал на него, у человека, открывшего PHPMyAdmin в броузере должно быть установлено приложение, использующее <a href="http://api.yandex.ru/safebrowsing/">Yandex SafeBrowsing</a> &mdash; например, Яндекс.Бар, или Яндекс.Браузер.</p>

<p>Вывод: если вы пользуетесь PHPMyAdmin, или вообще занимаетесь поддержкой сайтов, продукты Яндекса лучше не использовать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redshift через месяц]]></title>
    <link href="http://erthad.name/blog/2013/10/12/redshift-chieriez-miesiats/"/>
    <updated>2013-10-12T12:19:00+04:00</updated>
    <id>http://erthad.name/blog/2013/10/12/redshift-chieriez-miesiats</id>
    <content type="html"><![CDATA[<p><a href="http://erthad.name/blog/2013/09/16/ustalost%27-ghlaz/">Месяц назад</a> я поставил себе redshift, т.к. работать
было невозможно &mdash; глаза болели.</p>

<p>Прошел месяц и можно говорить о результатах. Глаза, конечно, устают, но уже не так &mdash; можно просидеть за
компьютером много часов подряд, а глаза не болят. Когда в комнате темно я дополнительно еще включаю USB-лампу,
чтобы видно было клавиатуру.</p>

<p>Исключение &mdash; глаза все же немного болят, если садиться за компьютер с самого утра.
Сперва нужно размяться (все тело, не только глаза), потянуться, час-другой позаниматься другими делами,
после этого можно и за компьютер сесть без особых последствий.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upstart limits]]></title>
    <link href="http://erthad.name/blog/2013/10/12/upstart-limits/"/>
    <updated>2013-10-12T12:06:00+04:00</updated>
    <id>http://erthad.name/blog/2013/10/12/upstart-limits</id>
    <content type="html"><![CDATA[<p>Как всем известно, чтобы установить лимиты ресурсов для сервиса, запускаемого через Upstart
нужно править соответствующий скрипт запуска, а лимиты, установленные в <code>/etc/security/limits.conf</code>
не действуют. Однако я не встречал в доках упоминание о том, что эти лимиты применяются только
после остановки и последующего запуска сервиса, но не применяются при рестарте.</p>

<p>Проиллюстрирую примером.</p>

<!-- more -->


<p>Upstart-скрипт и лимиты для <a href="http://www.docker.io/">Docker</a> по-умолчанию:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  cat /etc/init/docker.conf | egrep -v '^($|#)'                                                                      * source c2d7a58
</span><span class='line'>description     "Docker daemon"
</span><span class='line'>start on filesystem and started lxc-net
</span><span class='line'>stop on runlevel [!2345]
</span><span class='line'>respawn
</span><span class='line'>script
</span><span class='line'>  /usr/bin/docker -d
</span><span class='line'>end script
</span><span class='line'>
</span><span class='line'>~/git/timurbatyrshin.github.com
</span><span class='line'>$  cat /proc/$(pidof docker)/limits | grep files                                                                      * source c2d7a58
</span><span class='line'>Max open files            1024                 4096                 files     </span></code></pre></td></tr></table></div></figure>


<p>Чуть-чуть меняем upstart-скрипт и смотрим результат:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$  cat /etc/init/docker.conf | egrep -v '^($|#)'
</span><span class='line'>description     "Docker daemon"
</span><span class='line'>start on filesystem and started lxc-net
</span><span class='line'>stop on runlevel [!2345]
</span><span class='line'>respawn
</span><span class='line'>limit nofile 65535 65535  # &lt;--- добавили эту строчку
</span><span class='line'>script
</span><span class='line'>  /usr/bin/docker -d
</span><span class='line'>end script
</span><span class='line'>
</span><span class='line'>$  sudo restart docker
</span><span class='line'>docker start/running, process 4721
</span><span class='line'>
</span><span class='line'>$  cat /proc/$(pidof docker)/limits | grep files
</span><span class='line'>Max open files            1024                 4096                 files     
</span><span class='line'>
</span><span class='line'>$  sudo stop docker ; sudo start docker
</span><span class='line'>docker stop/waiting
</span><span class='line'>docker start/running, process 4772
</span><span class='line'>
</span><span class='line'>$  cat /proc/$(pidof docker)/limits | grep files
</span><span class='line'>Max open files            65535                65535                files     </span></code></pre></td></tr></table></div></figure>


<p>Как видим, лимиты при рестарте не изменяются, а меняются только при остановке-старте.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Усталость глаз]]></title>
    <link href="http://erthad.name/blog/2013/09/16/ustalost%27-ghlaz/"/>
    <updated>2013-09-16T19:34:00+04:00</updated>
    <id>http://erthad.name/blog/2013/09/16/ustalost&#8217;-ghlaz</id>
    <content type="html"><![CDATA[<p>Последнее время как-то быстро стали уставать глаза от компьютера. Видимо световой день сократился, стал больше
сидеть в плохо освещенной комнате и из-за высокого перепада яркости между экраном дисплея и окружающим фоном
глаза нагружаются больше.</p>

<p>Вспомнил, что читал недавно на хабре про какие-то супер-очки, которые защищают глаза от верхней части спектра видимого света
(проще говоря, не пропускают голубой и синий цвета) и уже начал думать где бы такие поискать как вспомнил о
программе, которую когда-то пробовал использовать: <a href="http://justgetflux.com/">Flux</a>
В тот раз она мне в общем понравилась, но почему-то долго не прижилась.</p>

<p>Еще до установки вспомнился и ее минус &mdash; тормозит. Недолгие поиски показали, что есть аналогичная программа
(есть в убунту из коробки): <a href="http://jonls.dk/redshift/">Redshift</a>.
Настраивать можно так же все что нужно параметры &mdash; температуру, широту и т.д.
Пока поставил ее.</p>

<p>Через 5 минут экран слился по яркости с окружающим фоном и глаза вроде как перестали уставать.
Посмотрим, сколько эта штука проживет у меня.</p>

<p>Возможно, в прошлый раз не прижилась, т.к. при ярком голубовато-белом офисном свете толку от нее не так много &mdash; нужен желтый свет
ламп накаливания.</p>
]]></content>
  </entry>
  
</feed>
