<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tdd | Timur Batyrshin's blog]]></title>
  <link href="http://timurb.ru/blog/categories/tdd/atom.xml" rel="self"/>
  <link href="http://timurb.ru/"/>
  <updated>2016-08-02T12:51:50+03:00</updated>
  <id>http://timurb.ru/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TDD and Diffuse Mode]]></title>
    <link href="http://timurb.ru/blog/2015/01/04/tdd-and-diffuse-mode/"/>
    <updated>2015-01-04T18:16:00+03:00</updated>
    <id>http://timurb.ru/blog/2015/01/04/tdd-and-diffuse-mode</id>
    <content type="html"><![CDATA[<p>Сейчас смотрел видеоматериалы <a href="https://www.coursera.org/learn/learning-how-to-learn">курса об обучении</a> с Coursera.</p>

<p>В первом модуле там говорится о существовании двух режимов мозга: focused mode и diffuse mode. Focused mode — режим в котором мы концентрируемся на какой-то задаче не отвлекаясь на посторонние раздражители. В diffuse mode мы, напротив, ни на чем не концентрируемся, расслабляя ум, и в этом режиме происходит другой характер работы над предметом.</p>

<p>В видеоролике, который я сегодня посмотрел, <a href="https://twitter.com/barbaraoakley">Барбара</a> брала интервью у редактора журнала и известной (в Америке) писательницы по совместительству. Очень интересный момент, который я услышал — в режиме “focused mode” она редактирует тексты, а в режиме “diffuse mode” — пишет. Попытки заниматься деятельностью, не подходящей к режиму ни к чему хорошему не приводило — в focused mode она писала с очень большим трудом, а в diffuse mode очевидно ты пропустишь кучу стилистических, орфографических и прочих ошибок.</p>

<p>К чему я все это? Похожую аналогию можно провести с программированием. Нам нужно быстрая генерация идей, при этом для нас важно, чтобы они оказались рабочими — мы не можем сначала написать десять страниц кода, а потом проверить насколько они рабочие. В этом нам помогают наши любимые unit-тесты. Они работают быстро, их можно запускать часто, даже постоянно (есть даже, например, <a href="http://guardgem.org/">программа под названием guard для этого</a>). Это позволяет нам творить не задумываясь над деталями реализации, и оно еще при этом будет работать. После того как наколбасили класс-другой можно посмотреть порефакторить, если кажется, что это нужно, либо закоммитить как есть. Более всего, наверное, это подходит к ruby, который идеально подходит для режима “пиши что думаешь”.</p>

<p>Как считаете, наблюдается ли такое?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Тестирование правил мониторинга]]></title>
    <link href="http://timurb.ru/blog/2014/03/27/testirovanie-pravil-monitoringha/"/>
    <updated>2014-03-27T21:53:00+04:00</updated>
    <id>http://timurb.ru/blog/2014/03/27/testirovanie-pravil-monitoringha</id>
    <content type="html"><![CDATA[<p>Регулярно хочется формализовать некоторые правила, по которым должен работать сервер как &ldquo;черный ящик&rdquo;.</p>

<ul>
<li>&ldquo;Если места на диске осталось меньше 1Гб, должен прийти алерт от мониторинга&rdquo;</li>
<li>&ldquo;Если сервис у нас лежит, должен прийти алерт от мониторинга&rdquo;</li>
<li>&ldquo;При входе на сайт нас должно перекидывать на https&rdquo;</li>
</ul>


<p>и т.д.</p>

<p>Задачу &ldquo;внешнего&rdquo; тестирования, наверное, может помочь решить <a href="https://github.com/gauntlt/gauntlt,">https://github.com/gauntlt/gauntlt,</a> а вот
как писать спеки для заббикса?</p>

<p>Зачем это нужно? Допустим, мы правим какой-то триггер, и в нем ошиблись &mdash; написали вместо гигабайтов байты.
Когда мы об этом узнаем? Только уже когда проблема возникла. Для этого и нужно тестирование &mdash; создав
аварийную ситуацию на тестовом сервере мы сможем узнать, правильно ли работает правило.</p>

<p>Никому не встречался инструмент для решения такой задачи?</p>
]]></content>
  </entry>
  
</feed>
