<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | Erthad's blog]]></title>
  <link href="http://timurb.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://timurb.github.io/"/>
  <updated>2016-08-02T12:45:10+03:00</updated>
  <id>http://timurb.github.io/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ansible -- беглый обзор]]></title>
    <link href="http://timurb.github.io/blog/2013/10/21/ansible-bieghlyi-obzor/"/>
    <updated>2013-10-21T23:50:00+04:00</updated>
    <id>http://timurb.github.io/blog/2013/10/21/ansible-bieghlyi-obzor</id>
    <content type="html"><![CDATA[<p>Бегло прошелся по докам к <a href="http://www.ansibleworks.com/docs/">Ansible</a>.
Попробую сравнить с <a href="http://www.opscode.com/chef/">Chef</a> и <a href="http://puppetlabs.com/puppet/puppet-open-source">Puppet</a>, с которыми у меня есть хороший опыт работы.</p>

<p>Интересная штука, но своеобразная.</p>

<!-- more -->


<h3>Простые случаи использования</h3>

<p>Для случаев, когда нужно установить пару пакетов, разложить несколько конфигов по местам.</p>

<ul>
<li>проще чем Puppet</li>
<li>вместо ресурсов скорее правильнее говорить об операциях или командах (но при этом декларативных)</li>
<li>модули на все случаи жизни <a href="http://www.ansibleworks.com/docs/modules.html">из коробки</a></li>
<li>не требует инсталляции на настраиваемый сервер ничего кроме Python (а он и так почти всегда есть)</li>
<li>нет серверной части (в том же понимании, как у Chef/Puppet)</li>
<li>управляющая (клиентская) часть ставится легко и почти ничего не вытягивает</li>
<li>работает по SSH</li>
<li>можно выполнить отдельную операцию с командной строки точно так же как из плейбука
(аналога манифеста Puppet и кукбука Chef)</li>
<li>нет поллинга (запускается только вручную)</li>
</ul>


<p>Это наталкивает на мысль, что его очень удобно использовать для первоначального разворачивания серверов
по сравнению с Chef/Puppet. Или для какого-нибудь начала управления кучей ручных разнородных серверов,
что почти то же самое.</p>

<p>Пожалуй, я бы для бутстрапа (без далеких планов) рекомендовал бы теперь его.</p>

<h3>Сложные случаи использования</h3>

<p>Для случаев, когда нужно поддерживать архитектуру с многими ролями, да еще и завязанных друг на друга.</p>

<ul>
<li>ограниченный язык (похож в этом на Puppet) &mdash; сложную логику писать скорее всего непросто</li>
<li>но модули дописывать легче, и чем на Chef и тем более чем на Puppet &mdash; можно писать на любом языке,
разговаривают с сервером по STDIN/STDOUT. Для Python есть библиотеки, упрощающие дело.</li>
<li>шаблоны на Jinja2 вместо ERB, что в чем-то добавляет гибкости (т.е. легко расширять, например добавить хелперов), а в чем-то уменьшает (нельзя код в шаблонах писать)</li>
<li>мне показалось, что и плагины (логирование, пост-хуки и т.п.) писать также проще чем в Puppet/Chef</li>
<li>операции выполняются сверху вниз как в Chef (а не по зависимостям как в Puppet)</li>
<li>оповещения мне показались более ограниченными по сравнению с Chef и Puppet (но ограниченными правильно) &mdash;
&ldquo;обычные&rdquo; операции идут отдельным списком от тех, куда шлются оповещения</li>
<li>инвентарем управлять, похоже, проще чем в Chef и Puppet, можно его хранить в VCS</li>
<li>нет центрального хранилища фактов</li>
<li>нет автоматической поддержки разных OS. Т.е. вместо, например <code>package</code> из Chef, Puppet у нас есть <code>apt</code> и <code>yum</code>.</li>
<li>весь гемор с сертификатами клиентов теперь заменяется просто использованием соответствующего SSH-ключа</li>
<li>вместо SSH можно отдельной командой запустить супер-быстрый шифрованный канал, чтобы команды выполнялись
мгновенно (привет <a href="https://github.com/saltstack/salt">SaltStack</a>)</li>
<li>при желании можно вместо этого достаточно несложно дописать транспорт, скажем, через ActiveMQ/XMPP или что-то еще</li>
<li>в целом он мне показался намного более Unix-way</li>
</ul>


<h3>Что это значит?</h3>

<ul>
<li>Насколько просто писать сложные конфигурации &mdash; хз, нужно пробовать.</li>
<li>Пологая кривая обучения, легко, скорее всего перейти от скриптов деплоя к управлению инфраструктурой,
но где-то в середине похоже крутая горка, которую многие не преодолеют (в Puppet эта
горка еще круче, и за ней никакого плато уже нет), дальше снова пологая кривая.</li>
<li>Puppet использовать смысла теперь не вижу абсолютно никакого. Раньше не исключал его использование для маленьких простых случаев.</li>
<li>Серверную часть для сложных конфигураций придется собирать самим, но зато она получится какая нам нужна,
и скорее всего она окажется достаточно простая (типа пары заданий в кроне и нескольких скриптов обертки).
Сравни с Chef Server, который тянет RabbitMQ, CouchDB, Solr и еще какую-то кучку всего, или с Puppet, для которого
серверные компоненты (базы, hiera, дашборд и т.п.) подгонять друг под друга приходится день-другой-третий.</li>
<li>Если у нас зоопарк разношерстных систем (видел такой наверное только полраза, даже меньше), наверное будет управляться
не очень просто.</li>
<li>Т.к. система объединяет Orchestration с Configuration management можно ее использовать и например для деплоя,
или поддержки всего жизненного цикла серверов, начиная от создания контейнера и заканчивая его удалением, причем, все это
заворачивать в плейбуки. Сравни с Knife шефа или Puppet faces, которые добавляют конечно удобства, но не очень то
и нужны как таковые.</li>
</ul>


<p>Нужно будет еще когда-нибудь <a href="https://github.com/saltstack/salt">SaltStack</a> и <a href="http://palletops.com/">Pallet</a> посмотреть
для общего развития.</p>
]]></content>
  </entry>
  
</feed>
