<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Erthad's blog]]></title>
  <link href="http://erthad.name/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-06-07T21:43:42+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Сортировка версий на шелле]]></title>
    <link href="http://erthad.name/blog/2014/04/28/sortirovka-viersii-na-shiellie/"/>
    <updated>2014-04-28T13:42:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/28/sortirovka-viersii-na-shiellie</id>
    <content type="html"><![CDATA[<p>Периодически сталкиваюсь с задачей: как сравнить две версии вида X1.Y1.Z1 на шелле.
Очень часто это делают при помощи разнообразных врапперов.</p>

<!-- more -->


<p>На Ruby:</p>

<p>```ruby
Gem::Version.new(&lsquo;1.22.3&rsquo;) &lt; Gem::Version.new(&lsquo;1.2.3&rsquo;)</p>

<h1>=> false</h1>

<p>```</p>

<p>Или на Python:</p>

<p>```python
pkg_resources.parse_version(&lsquo;1.22.3&rsquo;) &lt; pkg_resources.parse_version(&lsquo;1.2.3&rsquo;)</p>

<h1>False</h1>

<p>```</p>

<p>Однако есть простой способ (<a href="http://stackoverflow.com/a/15324047/308871">о котором я позабыл</a>)
сравнить две версии на шелле, не запуская никаких дополнительных скриптовых языков:
```bash
cat | sort -V &lt;&lt; EOF
1.22.3
1.2.3
EOF</p>

<h1>1.2.3</h1>

<h1>1.22.3</h1>

<p>```</p>

<p>Запишу здесь, чтобы больше об этом не забывать.</p>

<p>Из минусов &mdash; скорее всего, не будет работать на странных системах типа MacOSX.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разворачивание скриптов]]></title>
    <link href="http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov/"/>
    <updated>2013-08-22T08:45:00+04:00</updated>
    <id>http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov</id>
    <content type="html"><![CDATA[<p>Часто бывает нужно развернуть на удаленный хост (управляемый при помощи chef) какие-то скрипты.
Это не проблема, но не менее часто в этих скриптах бывают нужны привязки конкретно к этому хосту.
Можно, конечно, реализовать обработку параметров командной строки или загрузку данных из конфига,
но первое добавляет кучу кода в скрипт и часто неудобно само по себе (нам нужно будет передать при
каждом запуске скрипта, скажем, с пяток некоротких параметров, причем каждый раз одинаковых), а
загрузка данных из конфига неудобна тем, что приходится обрабатывать случаи, когда конфиг не найден,
какие-то параметры не задали и т.д., что тоже не всегда оправдано.</p>

<!-- more -->


<p>К примеру, допустим, шеф у нас кладет на хост такой скрипт:
```bash</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;/var/www/${SITE}&rdquo;
cat /etc/sitecfg/site.template | sed &ldquo;s,@NAME@,${SITE},g&rdquo; > &ldquo;/etc/nginx/sites-available/${SITE}&rdquo;
```</p>

<p>В этом скрипте хочется выделить в отдельные переменные несколько частей:</p>

<ul>
<li>путь к каталогам с сайтами (<code>/var/www</code>)</li>
<li>имя темплейта (<code>/etc/sitecfg/site.template</code>)</li>
<li>путь, куда мы кладем обработанный темплейт (<code>/etc/nginx/sites-available</code>)</li>
<li>возможно, еще строку замены (<code>s,@NAME@,${SITE},g</code>)</li>
</ul>


<p>Ясно, что все эти переменные передавать через командную строку не будешь, как не будешь и создавать отдельный
конфиг для их хранения. При этом, для них лучше задать именно переменные, т.к., например, мы можем решить хранить
сайты не в <code>/var/www</code>, а в <code>/var/www/sites</code>, назвать темплейт более внятным именем и положить в более правильное место
и т.д.</p>

<p>Чтобы решить эту задачу, мы пишем скрипт как обычно, но в виде ERB-шаблона. Все нужные нам параметры
придут от Chef-а. Первое желание написать его так:
```erb</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;&lt;%= @sites_path %>/${SITE}&rdquo;
cat &ldquo;&lt;%= @site_template %>&rdquo; | sed &ldquo;&lt;%= @subst_string %> > &rdquo;&lt;%= @site_cfg_path %>/${SITE}&ldquo;
```</p>

<p>Казалось бы, все нормально, однако легко заметить, что такие конструкции как минимум, нелегко читать, а значит легко допустить
опечатку. Попробуйте найти, в каком месте я здесь забыл кавычку.</p>

<p>Перепишем таким образом:
```erb</p>

<h1>!/bin/sh</h1>

<h1>Generated by Chef for &lt;%= node[&lsquo;fqdn&rsquo;] %></h1>

<p>SITES_PATH=&ldquo;&lt;%= @sites_path %>&rdquo;
SITE_TEMPLATE=&ldquo;&lt;%= @site_template %>&rdquo;
SUBST_STRING=&ldquo;&lt;%= @subst_string %>&rdquo;
SITE_CFG_PATH=&ldquo;&lt;%= @site_cfg_path %>&rdquo;</p>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;${SITES_PATH}/${SITE}&rdquo;
cat &ldquo;${SITE_TEMPLATE}&rdquo; | sed &ldquo;${SUBST_STRING}&rdquo; > &ldquo;${SITE_CFG_PATH}/${SITE}&rdquo;
```</p>

<p>В результате получим довольно аккуратный скрипт, который легко читать и отлаживать.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Сокращение параметров командной строки]]></title>
    <link href="http://erthad.name/blog/2013/08/20/sokrashchieniie-paramietrov/"/>
    <updated>2013-08-20T11:46:00+04:00</updated>
    <id>http://erthad.name/blog/2013/08/20/sokrashchieniie-paramietrov</id>
    <content type="html"><![CDATA[<p>Бывает, при использовании какой-либо команды постоянно нужно бывает передавать ей длинные параметры.</p>

<p>Например:
<code>bash
aws din --region=eu
aws din --region=ap
aws start i-39b17e77 --region=us
</code></p>

<p>Можно создать алиасы, но это не всегда бывает применимо &mdash; например, в случае когда команда не принимает параметры
до операции, алиас создать не так просто.</p>

<p>Выход такой: свернем параметр до переменной:
```bash
export EU=&ldquo;&mdash;region=eu&rdquo;
export AP=&ldquo;&mdash;region=ap&rdquo;
export US=&ldquo;&mdash;region=us&rdquo;</p>

<p>aws din $EU
aws din $AP
aws start i-39b17e77 $US
```</p>
]]></content>
  </entry>
  
</feed>
