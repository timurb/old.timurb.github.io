<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Erthad's blog]]></title>
  <link href="http://erthad.name/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-07-17T13:44:53+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Что такое devops]]></title>
    <link href="http://erthad.name/blog/2014/06/14/chto-takoie-devops/"/>
    <updated>2014-06-14T23:45:00+04:00</updated>
    <id>http://erthad.name/blog/2014/06/14/chto-takoie-devops</id>
    <content type="html"><![CDATA[<p>В интернетах существует великое множество статей на тему &ldquo;что такое devops&rdquo;,
приводятся разнообразные версии, как-то:</p>

<ul>
<li><a href="http://en.wikipedia.org/wiki/DevOps">общение/сотрудничество/интеграция</a></li>
<li><a href="http://www.getchef.com/blog/2010/07/16/what-devops-means-to-me/">культура/автоматизация/измерение/обмен</a></li>
</ul>


<p>и прочие подобные вариации и это все действительно вдохновляет.</p>

<p>Тут же рядом движутся движения ChatOps и MonitoringLove (ex-MonitoringSucks), ворох технологических решений
(управление конфигурацией, виртуализация, контейнеризация, и еще вагон и маленькая тележка) и технологических
практик (унификация dev/prod окружений, immutable servers, continuos delivery/deployment).</p>

<p>Часто приводят параллели с <a href="http://ru.wikipedia.org/wiki/Agile">Agile</a>, и довольно часто пытаются (чаще всего
на LinkedIn и, по-моему, не очень успешно) как-то стыковать его с <a href="http://ru.wikipedia.org/wiki/ITIL">ITIL</a>.</p>

<p>Однако, практически каждое понятие можно свести к базовым смыслам, при помощи которых можно описать его
максимально сжато.</p>

<p>Для devops это будет &ldquo;<strong>управление общей технологической основой организационных процессов</strong>&rdquo;.</p>

<p>Любая организационная практика (а devops несомненно такой является) призвана как-то упорядочивать процессы в
организации, делать их понятными.</p>

<p>ITIL делает это за счет их формализации, документирования.<br>
Agile делает это за счет того, что принуждает людей больше общаться, обмениваться информацией, делиться опытом.<br>
Devops создает технологическое пространство, в котором организационные процессы происходят &mdash; задает контекст, создает
(простой!) протокол и средства общения, которые одновременно являются документированием, логированием, средствами управления и
разработки &mdash; <em>технологической основой</em> организационных процессов.</p>

<p>Сюда замечательно ложится все вышеперечисленное:</p>

<ul>
<li>&ldquo;общение/сотрудничество/интеграция&rdquo; &mdash; в общем, то же самое, но довольно поверхностно и крайне размыто, на грани понимания</li>
<li>&ldquo;культура/автоматизация/измерение/обмен&rdquo; &mdash; то же самое, но в терминах более-менее понятных процессов</li>
<li>управление конфигурацией &mdash; протокол работы с серверами, одновременно является документацией, а также основой для почти всего остального</li>
<li>унификация dev/prod окружений и immutable servers &mdash; контекст технологического общения разработчиков, тестеров и админов</li>
<li>виртуализация, контейнеризация &mdash; немного сбоку, но без них вряд ли возможно что-то из перечисленного</li>
<li>continuos delivery/deployment &mdash; делаем наш процесс непрерывным, вовлекаем в него людей</li>
<li>ChatOps &mdash; протокол, логирование, средство управления, коммуникация с командой</li>
<li>MonitoringLove &mdash; то же самое, что у ChatOps, но практически однонаправленное (поэтому ChatOps во многом на нем основан)</li>
</ul>


<p>Естественно, как и Agile с ITIL, Devops в частности &mdash; это каталог, набор практик, приемов, технологий, инструментов
для осуществления задачи, которую он перед собой ставит. Каждая из его частей делает какой-то вклад, но не является
обязательной. Вполне нормально применять один-два приема, или же применять все, что получается &mdash; вопрос лишь в том,
что мы хотим получить и какой ценой.</p>

<p>Devops &mdash; это <strong>&ldquo;управление общей технологической основой организационных процессов&rdquo;</strong>, именно так.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Devops]]></title>
    <link href="http://erthad.name/blog/2014/04/16/devops/"/>
    <updated>2014-04-16T13:17:00+04:00</updated>
    <id>http://erthad.name/blog/2014/04/16/devops</id>
    <content type="html"><![CDATA[<p>Как всем известно, последние несколько лет очень популярно слово &ldquo;Devops&rdquo;.
Про это пишут большое количество статей, кто-то говорит про культуру, кто-то
про задачи бизнеса, кто-то про автоматизацию, сравнивают с Agile, но ясности
это не прибавляет. Внесу и я свои пять копеек на этот счет.</p>

<!-- more -->


<p>По мне так говорить о devops смысла нет вообще — правильнее говорить о том,
чтобы хорошо выполнять свою работу, внимательно относиться к другим участникам
проекта и развиваться в профессиональном (и других) смыслах.</p>

<p>Когда-то давно, когда серверов было мало, и когда было четкое разделение обязанностей
программистов и админов можно было позволить себе выточить из цельной глыбы исходников пакетов
дистрибутив мечты с правильно настроенными конфигами, расставленными костылями и
собственной архитектурой, не связанной с приложением, которое размещаешь.
Разработчикам тестовые сервера не давали т.к. их не было (хорошо если вообще были сборочницы), все работали
под виндой, приложение тестировали на собственных как попало настроенных компах, код выкатывали
в бинарниках и в общем-то вполне естественно было разделение сфер ответственности: админы админят
сервера и деплоят приложение, программистов туда не пускают, чтобы не отломали какой-нибудь костыль,
и все ошибки пуляют друг другу. Естественное желание разобраться в проблеме, найти проблему
и совместно ее исправить было реализовать нелегко (машинные мощности дорогие, приложение бинарное
и сложное), в свою среду разработки программисты никого (тоже по вполне естественным причинам) никого
не пускают. Потому и поддерживали стабильность лишь ограничивая сферу своей ответственности.
Я, по правде говоря, этих времен почти не застал, т.к. довольно быстро срулил из программирования
когда оно перешло из DOS в Windows (и сейчас понимаю, что причины во многом были именно вышеприведенные).
Автоматизировать что-то можно было, конечно, но смысла большого не имело, т.к. новые сервера ставились
раз в год, их было мало и проще было держать отдельно конфиги/доки по установке (или вообще каждый
раз это исследовать этот процесс заново), чем пытаться все это описывать скриптами.</p>

<p>Сейчас же мощности дешевые, сервера можно ставить десятками в день, и появляется <em>естественное</em>
желание этот процесс улучшить. Хочется сделать свою работу эффективнее, тратить на нее меньше усилий,
поддерживать хорошие отношения со всеми членами команды, и в итоге делать <em>общую</em> работу эффективнее.
Повторюсь, это вполне естественное желание здорового человека — заниматься <strong>осмысленной</strong> деятельностью.
Изменились лишь требования, предпосылки к этой <em>осмысленной</em> деятельности. Во многом это выражено
в <a href="http://agilemanifesto.org/">Agile manifesto</a>, который в трех словах говорит: &ldquo;Давайте жить дружно&rdquo;.</p>

<p>Из этого вытекает множество направлений деятельности, которые часто называют словом &ldquo;devops&rdquo;:</p>

<ul>
<li>Автоматизация развертывания серверов. Когда их десятки-сотни, для нас вытачивать вручную каждый из них —
менее эффективно, чем занять этим роботов.</li>
<li>Упрощенный деплой. Программисты в общем уже придумали множество инструментов для этого и, наверное,
для всех языков. Идея в том, что в идеале это должно занимать времени и внимания меньше, чем развернуть
новый сервер. Тратить несколько часов чтобы просто собрать и задеплоить какое-нибудь приложение на Java сейчас
становится просто дорого. Естественно, и приложение должно позволять это сделать.</li>
<li>CI. Это тоже, пожалуй, придумали программисты некотороые время назад, чтобы проще было собирать бинарник
и гонять тесты. Опять таки, приложение должно быть спроектировано, чтобы это поддерживать.
Шажок дальше — совместить сборку приложения и деплой на тестовый сервер, на который можно и программистов,
например, пустить (напоминаю, теперь мы можем себе этот сервер позволить, а раньше далеко не всегда могли).</li>
<li>Сбор и анализ всевозможных метрик и логов в едином месте. Это упрощает нам нахождение причин ошибок с тем,
чтобы передать их на исправление правильному человеку.</li>
<li>Культура взаимодействия разработчиков и админов. С одной стороны, все вышеприведенное попросту невозможно без нее,
а с другой стороны, у нас появилась возможность делать это <em>безопасно для обоих сторон</em>, и это действительно
важно.</li>
</ul>


<p>Иными словами, все это означает <em>работать одной командой</em> и стараться делать свою часть работы как можно лучше.</p>

<p>Где же здесь &ldquo;devops&rdquo;? Не знаю, может подскажет кто?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ansible -- беглый обзор]]></title>
    <link href="http://erthad.name/blog/2013/10/21/ansible-bieghlyi-obzor/"/>
    <updated>2013-10-21T23:50:00+04:00</updated>
    <id>http://erthad.name/blog/2013/10/21/ansible-bieghlyi-obzor</id>
    <content type="html"><![CDATA[<p>Бегло прошелся по докам к <a href="http://www.ansibleworks.com/docs/">Ansible</a>.
Попробую сравнить с <a href="http://www.opscode.com/chef/">Chef</a> и <a href="http://puppetlabs.com/puppet/puppet-open-source">Puppet</a>, с которыми у меня есть хороший опыт работы.</p>

<p>Интересная штука, но своеобразная.</p>

<!-- more -->


<h3>Простые случаи использования</h3>

<p>Для случаев, когда нужно установить пару пакетов, разложить несколько конфигов по местам.</p>

<ul>
<li>проще чем Puppet</li>
<li>вместо ресурсов скорее правильнее говорить об операциях или командах (но при этом декларативных)</li>
<li>модули на все случаи жизни <a href="http://www.ansibleworks.com/docs/modules.html">из коробки</a></li>
<li>не требует инсталляции на настраиваемый сервер ничего кроме Python (а он и так почти всегда есть)</li>
<li>нет серверной части (в том же понимании, как у Chef/Puppet)</li>
<li>управляющая (клиентская) часть ставится легко и почти ничего не вытягивает</li>
<li>работает по SSH</li>
<li>можно выполнить отдельную операцию с командной строки точно так же как из плейбука
(аналога манифеста Puppet и кукбука Chef)</li>
<li>нет поллинга (запускается только вручную)</li>
</ul>


<p>Это наталкивает на мысль, что его очень удобно использовать для первоначального разворачивания серверов
по сравнению с Chef/Puppet. Или для какого-нибудь начала управления кучей ручных разнородных серверов,
что почти то же самое.</p>

<p>Пожалуй, я бы для бутстрапа (без далеких планов) рекомендовал бы теперь его.</p>

<h3>Сложные случаи использования</h3>

<p>Для случаев, когда нужно поддерживать архитектуру с многими ролями, да еще и завязанных друг на друга.</p>

<ul>
<li>ограниченный язык (похож в этом на Puppet) &mdash; сложную логику писать скорее всего непросто</li>
<li>но модули дописывать легче, и чем на Chef и тем более чем на Puppet &mdash; можно писать на любом языке,
разговаривают с сервером по STDIN/STDOUT. Для Python есть библиотеки, упрощающие дело.</li>
<li>шаблоны на Jinja2 вместо ERB, что в чем-то добавляет гибкости (т.е. легко расширять, например добавить хелперов), а в чем-то уменьшает (нельзя код в шаблонах писать)</li>
<li>мне показалось, что и плагины (логирование, пост-хуки и т.п.) писать также проще чем в Puppet/Chef</li>
<li>операции выполняются сверху вниз как в Chef (а не по зависимостям как в Puppet)</li>
<li>оповещения мне показались более ограниченными по сравнению с Chef и Puppet (но ограниченными правильно) &mdash;
&ldquo;обычные&rdquo; операции идут отдельным списком от тех, куда шлются оповещения</li>
<li>инвентарем управлять, похоже, проще чем в Chef и Puppet, можно его хранить в VCS</li>
<li>нет центрального хранилища фактов</li>
<li>нет автоматической поддержки разных OS. Т.е. вместо, например <code>package</code> из Chef, Puppet у нас есть <code>apt</code> и <code>yum</code>.</li>
<li>весь гемор с сертификатами клиентов теперь заменяется просто использованием соответствующего SSH-ключа</li>
<li>вместо SSH можно отдельной командой запустить супер-быстрый шифрованный канал, чтобы команды выполнялись
мгновенно (привет <a href="https://github.com/saltstack/salt">SaltStack</a>)</li>
<li>при желании можно вместо этого достаточно несложно дописать транспорт, скажем, через ActiveMQ/XMPP или что-то еще</li>
<li>в целом он мне показался намного более Unix-way</li>
</ul>


<h3>Что это значит?</h3>

<ul>
<li>Насколько просто писать сложные конфигурации &mdash; хз, нужно пробовать.</li>
<li>Пологая кривая обучения, легко, скорее всего перейти от скриптов деплоя к управлению инфраструктурой,
но где-то в середине похоже крутая горка, которую многие не преодолеют (в Puppet эта
горка еще круче, и за ней никакого плато уже нет), дальше снова пологая кривая.</li>
<li>Puppet использовать смысла теперь не вижу абсолютно никакого. Раньше не исключал его использование для маленьких простых случаев.</li>
<li>Серверную часть для сложных конфигураций придется собирать самим, но зато она получится какая нам нужна,
и скорее всего она окажется достаточно простая (типа пары заданий в кроне и нескольких скриптов обертки).
Сравни с Chef Server, который тянет RabbitMQ, CouchDB, Solr и еще какую-то кучку всего, или с Puppet, для которого
серверные компоненты (базы, hiera, дашборд и т.п.) подгонять друг под друга приходится день-другой-третий.</li>
<li>Если у нас зоопарк разношерстных систем (видел такой наверное только полраза, даже меньше), наверное будет управляться
не очень просто.</li>
<li>Т.к. система объединяет Orchestration с Configuration management можно ее использовать и например для деплоя,
или поддержки всего жизненного цикла серверов, начиная от создания контейнера и заканчивая его удалением, причем, все это
заворачивать в плейбуки. Сравни с Knife шефа или Puppet faces, которые добавляют конечно удобства, но не очень то
и нужны как таковые.</li>
</ul>


<p>Нужно будет еще когда-нибудь <a href="https://github.com/saltstack/salt">SaltStack</a> и <a href="http://palletops.com/">Pallet</a> посмотреть
для общего развития.</p>
]]></content>
  </entry>
  
</feed>
