<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Erthad's blog]]></title>
  <link href="http://erthad.name/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-06-07T19:33:42+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Разворачивание скриптов]]></title>
    <link href="http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov/"/>
    <updated>2013-08-22T08:45:00+04:00</updated>
    <id>http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov</id>
    <content type="html"><![CDATA[<p>Часто бывает нужно развернуть на удаленный хост (управляемый при помощи chef) какие-то скрипты.
Это не проблема, но не менее часто в этих скриптах бывают нужны привязки конкретно к этому хосту.
Можно, конечно, реализовать обработку параметров командной строки или загрузку данных из конфига,
но первое добавляет кучу кода в скрипт и часто неудобно само по себе (нам нужно будет передать при
каждом запуске скрипта, скажем, с пяток некоротких параметров, причем каждый раз одинаковых), а
загрузка данных из конфига неудобна тем, что приходится обрабатывать случаи, когда конфиг не найден,
какие-то параметры не задали и т.д., что тоже не всегда оправдано.</p>

<!-- more -->


<p>К примеру, допустим, шеф у нас кладет на хост такой скрипт:
```bash</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;/var/www/${SITE}&rdquo;
cat /etc/sitecfg/site.template | sed &ldquo;s,@NAME@,${SITE},g&rdquo; > &ldquo;/etc/nginx/sites-available/${SITE}&rdquo;
```</p>

<p>В этом скрипте хочется выделить в отдельные переменные несколько частей:</p>

<ul>
<li>путь к каталогам с сайтами (<code>/var/www</code>)</li>
<li>имя темплейта (<code>/etc/sitecfg/site.template</code>)</li>
<li>путь, куда мы кладем обработанный темплейт (<code>/etc/nginx/sites-available</code>)</li>
<li>возможно, еще строку замены (<code>s,@NAME@,${SITE},g</code>)</li>
</ul>


<p>Ясно, что все эти переменные передавать через командную строку не будешь, как не будешь и создавать отдельный
конфиг для их хранения. При этом, для них лучше задать именно переменные, т.к., например, мы можем решить хранить
сайты не в <code>/var/www</code>, а в <code>/var/www/sites</code>, назвать темплейт более внятным именем и положить в более правильное место
и т.д.</p>

<p>Чтобы решить эту задачу, мы пишем скрипт как обычно, но в виде ERB-шаблона. Все нужные нам параметры
придут от Chef-а. Первое желание написать его так:
```erb</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;&lt;%= @sites_path %>/${SITE}&rdquo;
cat &ldquo;&lt;%= @site_template %>&rdquo; | sed &ldquo;&lt;%= @subst_string %> > &rdquo;&lt;%= @site_cfg_path %>/${SITE}&ldquo;
```</p>

<p>Казалось бы, все нормально, однако легко заметить, что такие конструкции как минимум, нелегко читать, а значит легко допустить
опечатку. Попробуйте найти, в каком месте я здесь забыл кавычку.</p>

<p>Перепишем таким образом:
```erb</p>

<h1>!/bin/sh</h1>

<h1>Generated by Chef for &lt;%= node[&lsquo;fqdn&rsquo;] %></h1>

<p>SITES_PATH=&ldquo;&lt;%= @sites_path %>&rdquo;
SITE_TEMPLATE=&ldquo;&lt;%= @site_template %>&rdquo;
SUBST_STRING=&ldquo;&lt;%= @subst_string %>&rdquo;
SITE_CFG_PATH=&ldquo;&lt;%= @site_cfg_path %>&rdquo;</p>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;${SITES_PATH}/${SITE}&rdquo;
cat &ldquo;${SITE_TEMPLATE}&rdquo; | sed &ldquo;${SUBST_STRING}&rdquo; > &ldquo;${SITE_CFG_PATH}/${SITE}&rdquo;
```</p>

<p>В результате получим довольно аккуратный скрипт, который легко читать и отлаживать.</p>
]]></content>
  </entry>
  
</feed>
