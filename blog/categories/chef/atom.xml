<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | Erthad's blog]]></title>
  <link href="http://erthad.name/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-10-24T20:22:44+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Default attributes in chef]]></title>
    <link href="http://erthad.name/blog/2014/10/24/default-attributes/"/>
    <updated>2014-10-24T19:19:00+04:00</updated>
    <id>http://erthad.name/blog/2014/10/24/default-attributes</id>
    <content type="html"><![CDATA[<p>Как мы знаем, если мы в Chef используем какой-то произвольный атрибут <code>node.foobar</code>, и если у нас он в этот
момент неопределен мы получаем exception.</p>

<p>Это можно обойти несколькими способами:</p>

<ol>
<li>Конструкция вида <code>node.attribute?('foobar') ? node.foobar : 'some_default'</code> или она же завернутая в хелпер-функцию.
Это по очевидным причинам довольно неудобно.</li>
<li>Просто задаем умолчания (<code>nil</code>) в файле атрибутов для всех атрибутов, которые мы используем за исключением тех, на которых нам обязательно
нужно падать. Вариант хороший, у нас всегда есть документация по всем используемым атрибутам, но он начинает работать со
скрипом, когда мы дергаем атрибут из другого кукбука, который у нас в ранлисте может встречаться, а может и не встречаться.
Переопределять родительский атрибут в своих атрибутах нельзя, т.к. получим неопределенное поведение, приходиться вручную
заводить какие-то умолчания для нод или окружений.</li>
<li><p>Для всех таких случаев используем конструкцию <code>(( node.foobar rescue 'some_default' ))</code>. Именно так, с двойными скобками,
иначе мы не сможем ее передавать параметром внутри определения ресурса.
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Пример </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">template</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">myfile</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'><span class="n">source</span> <span class="p">(</span><span class="n">node</span><span class="o">.</span><span class="n">template</span> <span class="k">rescue</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">template</span><span class="o">.</span><span class="n">erb</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>   <span class="c1"># так не пропустит синтаксис ruby</span>
</span><span class='line'><span class="n">mode</span>    <span class="n">node</span><span class="o">.</span><span class="n">mode</span>     <span class="k">rescue</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mo">0644</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>            <span class="c1"># так сработает неправильно (см. ниже)</span>
</span><span class='line'><span class="n">owner</span> <span class="p">((</span><span class="n">node</span><span class="o">.</span><span class="n">owner</span>    <span class="k">rescue</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">root</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;))</span>      <span class="c1"># &amp;lt;&amp;mdash; так правильно</span>
</span><span class='line'><span class="k">end</span> <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><ul>
<li>Вторая строчка в этом примере кажется нормальной, но она будет выполняться как <code>(mode node.mode) rescue "0644"</code>, что
очевидно делает совсем не то, что нам надо &mdash; значение по-умолчанию не передается внутрь ресурса в случае exception, как мы здесь ожидаем.</li>
</ul>
</li>
</ol>


<p>Какой же из способов лучше? Все хороши. Я уже давным давно пользуюсь вторым и чуть менее давно &mdash; третьим. Заводить функцию под первый
вариант не нравится, т.к. придется всюду таскать ее или зависимость на кукбук, который ее определеяет.</p>

<p>Еще есть хороший вариант, предлагаемый <a href="http://evilmartians.com/">Evil Martians</a> &mdash; заворачивать в LWRP все что можно, но с этим
вариантом проблема такая же как со многими хорошими паттернами программирования: если ты сразу его не применил, придется в какой-то
момент останавливаться и делать глобальный рефактор всего.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Разворачивание скриптов]]></title>
    <link href="http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov/"/>
    <updated>2013-08-22T08:45:00+04:00</updated>
    <id>http://erthad.name/blog/2013/08/22/razvorachivaniie-skriptov</id>
    <content type="html"><![CDATA[<p>Часто бывает нужно развернуть на удаленный хост (управляемый при помощи chef) какие-то скрипты.
Это не проблема, но не менее часто в этих скриптах бывают нужны привязки конкретно к этому хосту.
Можно, конечно, реализовать обработку параметров командной строки или загрузку данных из конфига,
но первое добавляет кучу кода в скрипт и часто неудобно само по себе (нам нужно будет передать при
каждом запуске скрипта, скажем, с пяток некоротких параметров, причем каждый раз одинаковых), а
загрузка данных из конфига неудобна тем, что приходится обрабатывать случаи, когда конфиг не найден,
какие-то параметры не задали и т.д., что тоже не всегда оправдано.</p>

<!-- more -->


<p>К примеру, допустим, шеф у нас кладет на хост такой скрипт:
```bash</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;/var/www/${SITE}&rdquo;
cat /etc/sitecfg/site.template | sed &ldquo;s,@NAME@,${SITE},g&rdquo; > &ldquo;/etc/nginx/sites-available/${SITE}&rdquo;
```</p>

<p>В этом скрипте хочется выделить в отдельные переменные несколько частей:</p>

<ul>
<li>путь к каталогам с сайтами (<code>/var/www</code>)</li>
<li>имя темплейта (<code>/etc/sitecfg/site.template</code>)</li>
<li>путь, куда мы кладем обработанный темплейт (<code>/etc/nginx/sites-available</code>)</li>
<li>возможно, еще строку замены (<code>s,@NAME@,${SITE},g</code>)</li>
</ul>


<p>Ясно, что все эти переменные передавать через командную строку не будешь, как не будешь и создавать отдельный
конфиг для их хранения. При этом, для них лучше задать именно переменные, т.к., например, мы можем решить хранить
сайты не в <code>/var/www</code>, а в <code>/var/www/sites</code>, назвать темплейт более внятным именем и положить в более правильное место
и т.д.</p>

<p>Чтобы решить эту задачу, мы пишем скрипт как обычно, но в виде ERB-шаблона. Все нужные нам параметры
придут от Chef-а. Первое желание написать его так:
```erb</p>

<h1>!/bin/sh</h1>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;&lt;%= @sites_path %>/${SITE}&rdquo;
cat &ldquo;&lt;%= @site_template %>&rdquo; | sed &ldquo;&lt;%= @subst_string %> > &rdquo;&lt;%= @site_cfg_path %>/${SITE}&ldquo;
```</p>

<p>Казалось бы, все нормально, однако легко заметить, что такие конструкции как минимум, нелегко читать, а значит легко допустить
опечатку. Попробуйте найти, в каком месте я здесь забыл кавычку.</p>

<p>Перепишем таким образом:
```erb</p>

<h1>!/bin/sh</h1>

<h1>Generated by Chef for &lt;%= node[&lsquo;fqdn&rsquo;] %></h1>

<p>SITES_PATH=&ldquo;&lt;%= @sites_path %>&rdquo;
SITE_TEMPLATE=&ldquo;&lt;%= @site_template %>&rdquo;
SUBST_STRING=&ldquo;&lt;%= @subst_string %>&rdquo;
SITE_CFG_PATH=&ldquo;&lt;%= @site_cfg_path %>&rdquo;</p>

<p>usage(){
 echo &ldquo;Usage: $(basename &rdquo;$0") SITE"
 exit 1
}</p>

<p>SITE=&ldquo;$1&rdquo;</p>

<p>[ -z &ldquo;${SITE}&rdquo; ] &amp;&amp; usage</p>

<p>mkdir &ldquo;${SITES_PATH}/${SITE}&rdquo;
cat &ldquo;${SITE_TEMPLATE}&rdquo; | sed &ldquo;${SUBST_STRING}&rdquo; > &ldquo;${SITE_CFG_PATH}/${SITE}&rdquo;
```</p>

<p>В результате получим довольно аккуратный скрипт, который легко читать и отлаживать.</p>
]]></content>
  </entry>
  
</feed>
