<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Erthad's blog]]></title>
  <link href="http://erthad.name/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://erthad.name/"/>
  <updated>2014-10-24T20:02:54+04:00</updated>
  <id>http://erthad.name/</id>
  <author>
    <name><![CDATA[Timur Batyrshin]]></name>
    <email><![CDATA[erthad@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RubyVsPython]]></title>
    <link href="http://erthad.name/blog/2014/03/13/rubyvspython/"/>
    <updated>2014-03-13T13:57:00+04:00</updated>
    <id>http://erthad.name/blog/2014/03/13/rubyvspython</id>
    <content type="html"><![CDATA[<p>Я уже где-то в твиттере писал свои впечатления от первого знакомства с python
после ruby, сегодня пришла очередная волна впечатлений, запишу их здесь.</p>

<p>Стандартная поставка:</p>

<ul>
<li>В Python практически все нужные для жизни вещи есть в стандартных библиотеках,
и они нормального качества, в том смысле, что ими можно пользоваться без проблем.</li>
<li>В Ruby стандартная библиотека довольно жуткая, и всегда хочется использовать
вместо нее какой-то гем, который делает то же самое, но проще и удобнее.</li>
</ul>


<p>Использование модулей:</p>

<ul>
<li>В Python при установке новых модулей они с высокой вероятностью по зависимостям
ничего не вытянут. Ну пару других модулей максимум.</li>
<li>В Ruby почти всегда гем зависит от довольно большого количества других гемов.
От этого и dependency hell вероятнее, и вообще это неудобно, если программирование
на ruby &mdash; не твое основное занятие.</li>
</ul>


<p>Названия модулей:</p>

<ul>
<li>Мне показалось, что в Python модули чаще называются сообразно тому, что они делают,
по названию модуля почти всегда можно понять для чего он.</li>
<li>В Ruby очень популярно давать гемам всякие странные названия, которые прикольно
звучат, но по которым сразу и не догадаешься о чем они. Соответственно, их сложнее
искать.</li>
</ul>


<p>Интерфейсы:</p>

<ul>
<li>Многие альтернативные модули (см., например, json) в Python делают ту же вещь, с тем
же интерфейсом, но с другой реализацией. Т.е. часто можно менять одно на другое
вообще с минимальными изменениями кода.</li>
<li>В Ruby очень любят плодить интерфейсы.</li>
</ul>


<p><strong>Выводы:</strong></p>

<ul>
<li>Для системных скриптов, да и шире, системного программирования удобнее
использовать Python, а также когда программирование не твое основное занятие.</li>
<li>Для установки приложения на большое количество разных хостов удобнее Python.
(Предыдущий пункт &mdash; частный случай этого). Шелл в этом смысле еще удобнее, но
на нем приходится писать много лишнего если пишешь что-то мало мальски сложное.</li>
<li>Для веб-приложений можно использовать то, к чему больше привык.</li>
</ul>


<p>Продолжение, я думаю, последует.</p>
]]></content>
  </entry>
  
</feed>
